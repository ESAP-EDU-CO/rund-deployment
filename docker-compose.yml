name: rund

services:
  openkm:
    # Se debe ajustar según el nombre:tag de la imagen y el nombre del contenedor
    image: openkm/openkm-ce:latest
    container_name: rund-core
    # Forzar el uso de la plataforma amd64, ya que no hay imagen arm64 oficial para OpenKM.
    platform: linux/amd64
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      # Persiste todos los datos de OpenKM (repositorio, base de datos, logs)
      - openkm-data:/opt/tomcat
    networks:
      - rund-network
    environment:
      # Configura la JVM para que use una fuente de entropía no bloqueante, evitando cuelgues en el arranque.
      - JAVA_OPTS=-Djava.security.egd=file:/dev/./urandom
      - TZ=America/Bogota # Configura explícitamente la zona horaria

  rund-api:
    image: rund-api:latest # El nombre de la imagen
    build:
      context: ./rund-api
      dockerfile: Dockerfile
    container_name: rund-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      # Mount logs and tmp directories for persistence
      - ./rund-api/logs:/var/www/html/logs
      - ./rund-api/tmp:/var/www/html/tmp
      # Development only: mount app directory for live changes
      - type: bind
        source: ./rund-api/app
        target: /var/www/html
      # Preserve the vendor directory from the image build, preventing it from being overwritten by the bind mount.
      - /var/www/html/vendor
    environment:
      - TZ=America/Bogota # Configura explícitamente la zona horaria
      - PHP_OPCACHE_ENABLE=1
      - PHP_OPCACHE_REVALIDATE_FREQ=0
      - PHP_OPCACHE_VALIDATE_TIMESTAMPS=1
      - ENVIRONMENT=development
      # URL de la API.
      - API_BASE_URL=http://localhost:3000
      # URL INTERNA con OpenKM
      - EXTERNAL_API_URL=http://rund-core:8080/OpenKM
      # URL INTERNA con OCR
      - OCR_API_URL=http://rund-ocr:8000
      # URL INTERNA con IA
      - AI_API_URL=http://rund-ai:11434
      # En producción, la URL interna NO cambia. Solo la externa.
      # - API_BASE_URL=http://172.16.234.52:3000
    networks:
      - rund-network
    depends_on:
      - rund-ocr
      - rund-ai
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  rund-mgp:
    image: rund-mgp:latest
    build:
      context: ./rund-mgp
      dockerfile: Dockerfile
    container_name: rund-mgp
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      - TZ=America/Bogota
      - NODE_ENV=production
      - PORT=4000
      # URL de la API para el frontend
      - API_BASE_URL=http://localhost:3000
      # URL interna entre contenedores
      - INTERNAL_API_URL=http://rund-api:3000
    networks:
      - rund-network
    depends_on:
      - rund-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  rund-ai:
    image: ollama/ollama:latest
    container_name: rund-ai
    # Forzar el uso de la plataforma amd64, ya que no hay imagen arm64 oficial para Ollama.
    platform: linux/amd64
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - rund-network
    environment:
      - TZ=America/Bogota
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Si tienes GPU NVIDIA disponible, descomenta las siguientes líneas:
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  rund-ocr:
    image: rund-ocr:latest
    build:
      context: ./rund-ocr
      dockerfile: Dockerfile
    container_name: rund-ocr
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      # Directorio temporal para archivos de procesamiento
      - ocr-temp:/tmp/ocr-processing
      # Cache de modelos para evitar descargas repetidas
      - ocr-models:/root/.paddleocr
    networks:
      - rund-network
    environment:
      - TZ=America/Bogota
      - PYTHONUNBUFFERED=1
      # Configuración específica para PaddleOCR
      - PADDLE_OCR_LANG=es,en
      - PADDLE_OCR_USE_GPU=false
      - MAX_FILE_SIZE=50MB
      - OCR_TIMEOUT=60
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s
    # Límites de recursos para evitar consumo excesivo de CPU
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "2.0"
        reservations:
          memory: 1G
          cpus: "1.0"

networks:
  rund-network:
    driver: bridge

volumes:
  # Define el volumen nombrado para los datos de OpenKM
  openkm-data:
    driver: local
  # Volumen para modelos de Ollama
  ollama-data:
    driver: local
  # Volumen para archivos temporales de OCR
  ocr-temp:
    driver: local
  # Volumen para cache de modelos de PaddleOCR
  ocr-models:
    driver: local
